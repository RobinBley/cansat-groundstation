package de.gt.gui.dialog.control;

import de.gt.api.config.Config;
import de.gt.api.config.ConfigLoader;
import de.gt.api.config.ConfigParser;
import de.gt.api.config.InvalidConfigException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.Lookup;
import de.gt.api.log.Out;

/**
 *
 * @author Kevin
 */
public class SatelliteChooseDialog extends javax.swing.JDialog {

    private Config config;
    private ConfigParser parser;
    private ConfigLoader loader;

    //Auswahlfeld für die Satelliten
    DefaultComboBoxModel<Config> configChooser = new DefaultComboBoxModel<>();

    /**
     * Creates new form SatelliteChooseDialog
     */
    public SatelliteChooseDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.parser = Lookup.getDefault().lookup(ConfigParser.class);
        this.loader = Lookup.getDefault().lookup(ConfigLoader.class);
    }

    public Config getConfig() {
        return this.config;
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            //Config immer Null setzen, damit der Dialog state zurückgesetzt ist
            this.config = null;
        }
        try {

            //Alle Elemente entfernen
            configChooser.removeAllElements();

            //Aktualisieren der Config auswahl
            getAvailableConfigs().stream().forEach(c -> configChooser.addElement(c));
        } catch (IOException ex) {
            //TODO: Show Error to user
        }

        super.setVisible(b);
    }

    private List<Config> getAvailableConfigs() throws IOException {
        File[] configFiles = getAvailableConfigFiles();
        List<Config> availableConfigs = new ArrayList<>();

        //Alle verfügbaren Konfigurationen durchlaufen
        for (File configFile : configFiles) {
            try {
                if (configFile.isFile()) {
                    //Config laden, parsen und in Liste speichern
                    availableConfigs.add(parser.parse(loader.load(configFile.getPath())));
                }
            } catch (InvalidConfigException ex) {
                Out.log("Fehler beim parsen einer Konfigurationsdatei!");
            }
        }

        return availableConfigs;
    }

    private File[] getAvailableConfigFiles() {
        File configDir = new File("config");

        //Alle verfügbaren Config Dateien zurückgeben
        return configDir.listFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbAvailableSatellites = new javax.swing.JComboBox();
        btnChooseConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmbAvailableSatellites.setModel(configChooser);

        org.openide.awt.Mnemonics.setLocalizedText(btnChooseConfig, org.openide.util.NbBundle.getMessage(SatelliteChooseDialog.class, "SatelliteChooseDialog.btnChooseConfig.text")); // NOI18N
        btnChooseConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbAvailableSatellites, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChooseConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAvailableSatellites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseConfigActionPerformed
        //Config kann über getter geholt werden, darum aktuelles Item setzen
        config = (Config) configChooser.getSelectedItem();
        dispose();
    }//GEN-LAST:event_btnChooseConfigActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseConfig;
    private javax.swing.JComboBox cmbAvailableSatellites;
    // End of variables declaration//GEN-END:variables
}
