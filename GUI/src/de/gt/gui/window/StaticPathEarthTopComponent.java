/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.gt.gui.window;

import gov.nasa.worldwind.BasicModel;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.BasicShapeAttributes;
import gov.nasa.worldwind.render.Material;
import gov.nasa.worldwind.render.Path;
import gov.nasa.worldwind.render.ShapeAttributes;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.gt.gui.window//StaticPathEarth//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StaticPathEarthTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "de.gt.gui.window.StaticPathEarthTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StaticPathEarthAction",
        preferredID = "StaticPathEarthTopComponent"
)
@Messages({
    "CTL_StaticPathEarthAction=StaticPathEarth",
    "CTL_StaticPathEarthTopComponent=StaticPathEarth Window",
    "HINT_StaticPathEarthTopComponent=This is a StaticPathEarth window"
})
public final class StaticPathEarthTopComponent extends TopComponent {

    private final WorldWindowGLCanvas wwd;
    private final Path path;
    
    public StaticPathEarthTopComponent() {
        initComponents();
        setName(Bundle.CTL_StaticPathEarthTopComponent());
        setToolTipText(Bundle.HINT_StaticPathEarthTopComponent());
        wwd = new WorldWindowGLCanvas();
        BasicModel bm = new BasicModel();
        wwd.setModel(bm);
        RenderableLayer layer = new RenderableLayer();
        ShapeAttributes attribs = new BasicShapeAttributes();
        attribs.setInteriorMaterial(Material.WHITE);
        attribs.setOutlineMaterial(Material.WHITE);
        attribs.setEnableAntialiasing(true);
        attribs.setInteriorOpacity(0.4);
        attribs.setDrawInterior(true);
        attribs.setDrawOutline(true);
        path = new Path();
        path.setAttributes(attribs);
        path.setShowPositions(true);
        path.setExtrude(true);
        path.setDrawVerticals(true);
        layer.addRenderable(path);
        bm.getLayers().add(layer);
    }
    
    public void setPositions(Iterable<Position> positions) {
        path.setPositions(positions);
        wwd.redraw();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
