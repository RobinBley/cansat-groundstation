/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.gt.gui.window;

import info.monitorenter.gui.chart.Chart2D;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 *
 * @author Kevin
 */
@ConvertAsProperties(
        dtd = "-//de.gt.gui.window//Visualization//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VisualizationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "de.gt.gui.window.VisualizationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VisualizationAction",
        preferredID = "VisualizationTopComponent"
)
@Messages({
    "CTL_VisualizationAction=Visualization",
    "CTL_VisualizationTopComponent=Visualization Window",
    "HINT_VisualizationTopComponent=This is a Visualization window"
})
public class VizualizationTopComponent extends TopComponent implements Receiver {
    /**
     * Creates new form VizualizationTopComponent
     */
    public VizualizationTopComponent() {
        initComponents();
    }

    @Override
    public int getPersistenceType() {
        //Komponenten schlie√üen, bei neustart der Applikation
        return TopComponent.PERSISTENCE_NEVER;
    }

    public void writeProperties(java.util.Properties p) {
        //Component version
        p.setProperty("version", "1.0");
    }

    public void readProperties(java.util.Properties p) {
    }

    private void setXAxisDescription(){
        
    }
    
    private void setyAxisDescription(){
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chart = new info.monitorenter.gui.chart.Chart2D();

        chart.setAutoscrolls(true);

        javax.swing.GroupLayout chartLayout = new javax.swing.GroupLayout(chart);
        chart.setLayout(chartLayout);
        chartLayout.setHorizontalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        chartLayout.setVerticalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private info.monitorenter.gui.chart.Chart2D chart;
    // End of variables declaration//GEN-END:variables
}
