package de.gt.gui.window;

import de.gt.api.input.data.DataUnit;
import de.gt.api.relay.Receiver;
import de.gt.api.sources.GPGGA;
import gov.nasa.worldwind.BasicModel;
import gov.nasa.worldwind.avlist.AVKey;
import gov.nasa.worldwind.awt.WorldWindowGLCanvas;
import gov.nasa.worldwind.geom.Position;
import gov.nasa.worldwind.layers.RenderableLayer;
import gov.nasa.worldwind.render.AnnotationAttributes;
import gov.nasa.worldwind.render.GlobeAnnotation;
import gov.nasa.worldwind.render.Polyline;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

@TopComponent.Description(
        preferredID = "LivePathEarthTopComponent",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_LivePathEarthAction=LivePathEarth",
    "CTL_LivePathEarthTopComponent=LivePathEarth Window",
    "HINT_LivePathEarthTopComponent=This is a LivePathEarth window"
})
public final class EarthTopComponent extends TopComponent implements Receiver {

    private static final String GPS_KEY = "gps";
    private static final AnnotationAttributes ATTRIBS = new AnnotationAttributes();

    static {
        ATTRIBS.setAdjustWidthToText(AVKey.SIZE_FIT_TEXT);
    }

    private final List<Position> positions = new ArrayList<>();

    private final WorldWindowGLCanvas wwd;
    private final RenderableLayer layer;
    private final Polyline path;

    public EarthTopComponent() {
        initComponents();
        setName(Bundle.CTL_LivePathEarthTopComponent());
        setToolTipText(Bundle.HINT_LivePathEarthTopComponent());
        wwd = new WorldWindowGLCanvas();
        BasicModel bm = new BasicModel();
        wwd.setModel(bm);
        layer = new RenderableLayer();
        path = new Polyline();
        layer.addRenderable(path);
        bm.getLayers().add(layer);
        add(wwd);
    }

    private void add(Position p, GlobeAnnotation a) {
        positions.add(p);
        path.setPositions(positions);
        layer.addRenderable(a);
        wwd.redraw();
    }

    @Override
    public void receive(Map<String, DataUnit> datum) {
        GPGGA gps = GPGGA.createFromString(datum.get(GPS_KEY).getStringValue());
        Position p = Position.fromDegrees(gps.getLatitude(), gps.getLongitude(), gps.getAltitude());
        StringBuilder b = new StringBuilder();
        datum.entrySet().stream()
                .map(e -> String.format("%s: %s", e.getKey(), e.getValue().getObjectValue()))
                .forEach(b::append);
        GlobeAnnotation a = new GlobeAnnotation(b.toString(), p, ATTRIBS);
        add(p, a);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }
}
